@page "/"

@using GWB.Example.Application.Core.Domain.Entities
@using GWB.Example.Application.Core.Results
@using GWB.Example.Application.Core.Services


@inject ICountryQueryService CountryQueryServiceMock

<MudTable Items="@Countries.Take(3)" Hover="true" Breakpoint="Breakpoint.Sm" Loading="@_loading" LoadingProgressColor="Color.Info">
    <HeaderContent>
        <MudTh>Id</MudTh>
        <MudTh>Name</MudTh>
        <MudTh>Description</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Id">@context.Id</MudTd>
        <MudTd DataLabel="Name">@context.Name</MudTd>
        <MudTd DataLabel="Description">@context.Description</MudTd>
    </RowTemplate>
</MudTable>

<MudSwitch @bind-Checked="_hidePosition">Hide <b>position</b> when Breakpoint=Xs</MudSwitch>
<MudSwitch @bind-Checked="_loading">Show Loading</MudSwitch>

@code {
    private bool _hidePosition;
    private bool _loading;
    private IEnumerable<Country> Countries = new List<Country>();

    protected override async Task OnInitializedAsync()
    {
        var result = await CountryQueryServiceMock.GetAllAsync();

        if (result is QuerySuccess<IEnumerable<Country>> success)
            Countries = success.Value;
    }
}




@*@page "/"


<div>
 

    <MudTable Items="@Elements.Take(3)" Hover="true" Breakpoint="Breakpoint.Sm" Loading="@_loading" LoadingProgressColor="Color.Info">
        <HeaderContent>
            <MudTh>Id</MudTh>
            <MudTh>Name</MudTh>
            <MudTh>Description</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Id">@context.Number</MudTd>
            <MudTd DataLabel="Sign">@context.Sign</MudTd>
            <MudTd DataLabel="Name">@context.Name</MudTd>
            <MudTd DataLabel="Position" HideSmall="_hidePosition">@context.Position</MudTd>
            <MudTd DataLabel="Molar mass">@context.Molar</MudTd>
        </RowTemplate>
    </MudTable>

    <MudSwitch @bind-Checked="_hidePosition">Hide <b>position</b> when Breakpoint=Xs</MudSwitch>
    <MudSwitch @bind-Checked="_loading">Show Loading</MudSwitch>

</div>

@code {

    private IEnumerable<Country> Elements = new List<Country>();

    protected override async Task OnInitializedAsync()
    {
        Elements = await CountryQueryServiceMock.GetAllAsync().FromProto();
    }
    
    //DateTime currentDate = DateTime.UtcNow;
    //bool is_running;
    //Task GetDate()
    //{
    //    currentDate = DateTime.UtcNow;
    //    return Task.CompletedTask;
    //}
}*@